#!/usr/bin/env python2
from __future__ import print_function
import irods
import compute.common
import getopt, os, sys
from os.path import ( join,  abspath, basename, dirname ,
                      curdir as CURDIR, sep as SEP)
from sys import stderr

verbose = False

def time_it (func, args=(),accum = (0,) , pos = -1, skip=False) :
  if skip: return func(*args) 
  if type (accum) is not accum: accum=list(accum)
  pos_ = pos
  if pos_ < 0: pos_ += min(1, len(accum))
  if pos_ > len(accum): accum.extend( [0,] * (pos_+1))
  start_time = time.time()
  return_value =  func(*args)
  end_time = time.time()
  accum[pos] += (end_time - start_time)
  return (return_value)

def optDict_and_cmdArgs(argv=sys.argv,short_opts='',long_opts=[]):
  opt,argV = getopt.getopt (argv[1:],short_opts,long_opts)
  argV = [ sys.argv[0], ] + list(argV)
  opt_dict = {}
  opt_dict . update (opt)
  return  opt_dict , argV

# --- process command line
optd, argv = optDict_and_cmdArgs ( short_opts = 'tR:pk:v', # long_opts=['kvpair=','verbose']
                                   )
# --- read options 

dest_resc_name = optd.get('-R','')
verbose = ( optd.get('-v') is not None )
put_option = ( optd.get('-p') is not None )
skipTime = False if optd.get( '-t' ) is None else True

session = compute.common.session_object()

assert 1 < len(argv) <= 3,  "usage: {} phys_path [dst_coll]".format( argv[0] )
  
if len(argv) < 3:  argv.append('')
(from_phys , dest_coll) = argv[1:3]
assert from_phys != "", "Need non-null physical path"

if SEP not in from_phys:
  from_phys = join( os.getcwd() , from_phys )

if not dest_coll:
  dest_coll = '/{}/home/{}'.format (session.zone,session.username)

if verbose:
 print('destcol = ',dest_coll , file=stderr)

full_data_object_path =  dest_coll + \
			 ('/' if not dest_coll.endswith('/') else '') + \
			 basename( from_phys )

if verbose:
 print('full object path dest = ', full_data_object_path, file=stderr)


if not put_option:
  session.data_objects.register ( from_phys,  full_data_object_path )
  object = session.data_objects.get( full_data_object_path ) 
  if dest_resc_name: object.replicate ( dest_resc_name )
else:
  if verbose:
    print('Warning: put option is on',file=stderr)
  session.data_objects.put ( from_phys, full_data_object_path )
  pass

